import torch

def compute_dBdp_x_matrix(x):
    device = x.device
    q1, q2 = x[:, 0, :].view(-1, 1, 1), x[:, 1, :].view(-1, 1, 1)
    dot_q1, dot_q2 = x[:, 2, :].view(-1, 1, 1), x[:, 3, :].view(-1, 1, 1)
    cos_q2 = torch.cos(q2).to(device)
    sin_q2 = torch.sin(q2).to(device)
    sin_q1 = torch.sin(q1).to(device)
    sin_q1_plus_q2 = torch.sin(q1 + q2).to(device)
    atan_100_dot_q1 = torch.atan(100 * dot_q1).to(device)
    atan_100_dot_q2 = torch.atan(100 * dot_q2).to(device)

    dBdp_x = torch.zeros((10, 4, 2, x.shape[0]), device=device)

    dBdp_x[0, 0, 0, :] = 0
    dBdp_x[0, 0, 1, :] = 0
    dBdp_x[0, 1, 0, :] = 0
    dBdp_x[0, 1, 1, :] = 0
    dBdp_x[1, 0, 0, :] = 0
    dBdp_x[1, 0, 1, :] = 0
    dBdp_x[1, 1, 0, :] = 0
    dBdp_x[1, 1, 1, :] = 0
    dBdp_x[1, 2, 0, :] = 0
    dBdp_x[1, 2, 1, :] = 0
    dBdp_x[1, 3, 0, :] = 0
    dBdp_x[1, 3, 1, :] = 0
    dBdp_x[2, 0, 0, :] = 0
    dBdp_x[2, 0, 1, :] = 0
    dBdp_x[2, 1, 0, :] = 0
    dBdp_x[2, 1, 1, :] = 0
    dBdp_x[3, 0, 0, :] = 0
    dBdp_x[3, 0, 1, :] = 0
    dBdp_x[3, 1, 0, :] = 0
    dBdp_x[3, 1, 1, :] = 0
    dBdp_x[3, 2, 0, :] = 0
    dBdp_x[3, 2, 1, :] = 0
    dBdp_x[3, 3, 0, :] = 0
    dBdp_x[3, 3, 1, :] = 0
    dBdp_x[4, 0, 0, :] = 0
    dBdp_x[4, 0, 1, :] = 0
    dBdp_x[4, 1, 0, :] = 0
    dBdp_x[4, 1, 1, :] = 0
    dBdp_x[4, 2, 0, :] = 0
    dBdp_x[4, 2, 1, :] = 0
    dBdp_x[4, 3, 0, :] = 0
    dBdp_x[4, 3, 1, :] = 0
    dBdp_x[5, 0, 0, :] = 0
    dBdp_x[5, 0, 1, :] = 0
    dBdp_x[5, 1, 0, :] = 0
    dBdp_x[5, 1, 1, :] = 0
    dBdp_x[8, 0, 0, :] = 0
    dBdp_x[8, 0, 1, :] = 0
    dBdp_x[8, 1, 0, :] = 0
    dBdp_x[8, 1, 1, :] = 0
    dBdp_x[8, 2, 0, :] = 0
    dBdp_x[8, 2, 1, :] = 0
    dBdp_x[8, 3, 0, :] = 0
    dBdp_x[8, 3, 1, :] = 0
    dBdp_x[9, 0, 0, :] = 0
    dBdp_x[9, 0, 1, :] = 0
    dBdp_x[9, 1, 0, :] = 0
    dBdp_x[9, 1, 1, :] = 0
    dBdp_x[9, 2, 0, :] = 0
    dBdp_x[9, 2, 1, :] = 0
    dBdp_x[9, 3, 0, :] = 0
    dBdp_x[9, 3, 1, :] = 0

    def element_0_2_0():
        term1 = (-5.64732 * cos_q2 - 9.5766)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (-0.012518226 * cos_q2 - 0.0146832)
        term2 *= (0.805918448475 * cos_q2 ** 2 + 2.864791314 * cos_q2 + 2.24595372)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_0_2_1():
        term1 = (1.960875 * cos_q2 + 1.8486)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (0.01230409845 * cos_q2 ** 2 + 0.026950266 * cos_q2 + 0.0146832)
        term2 *= (0.805918448475 * cos_q2 ** 2 + 2.864791314 * cos_q2 + 2.24595372)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_0_3_0():
        term1 = 14463.0130934286 * (0.078435 * cos_q2 + 0.0798)
        term1 *= (6.58854 * cos_q2 + 10.5342)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = -6.0 / (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_0_3_1():
        term1 = 14463.0130934286 * (-0.15687 * cos_q2 - 0.184)
        term1 *= (6.58854 * cos_q2 + 10.5342)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = -37.0 / (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_2_2_0():
        term1 = 427192.021899475 * (-0.012518226 * cos_q2 - 0.0146832)
        term1 *= (-0.006152049225 * cos_q2 ** 2 + 0.012518226 * cos_q2 + 0.02299836)
        term1 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        term2 = -0.0798 / (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        return term1 + term2

    def element_2_2_1():
        term1 = (0.078435 * cos_q2 + 0.0798)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (-0.006152049225 * cos_q2 ** 2 + 0.012518226 * cos_q2 + 0.02299836)
        term2 *= (0.01230409845 * cos_q2 ** 2 + 0.026950266 * cos_q2 + 0.0146832)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_2_3_0():
        term1 = 1154.1484448556 * (0.078435 * cos_q2 + 0.0798)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        return term1

    def element_2_3_1():
        term1 = 1154.1484448556 * (-0.15687 * cos_q2 - 0.184)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = -1 / (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_5_2_0():
        term1 = 427192.021899475 * (-0.012518226 * cos_q2 - 0.0146832)
        term1 *= (-0.00697642382115 * cos_q2 ** 3 - 0.00545531112 * cos_q2 ** 2 + 0.00314313048 * cos_q2)
        term1 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        term2 = -0.0301644 * cos_q2
        term2 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        return term1 + term2

    def element_5_2_1():
        term1 = (0.05929686 * cos_q2 ** 2 + 0.0649404 * cos_q2)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (0.01230409845 * cos_q2 ** 2 + 0.026950266 * cos_q2 + 0.0146832)
        term2 *= (-0.00697642382115 * cos_q2 ** 3 - 0.00545531112 * cos_q2 ** 2 + 0.00314313048 * cos_q2)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_5_3_0():
        term1 = -428.805631289602 * (0.078435 * cos_q2 + 0.0798) * cos_q2 ** 2
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = 0.189 * cos_q2
        term2 /= (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_5_3_1():
        term1 = -428.805631289602 * (-0.15687 * cos_q2 - 0.184) * cos_q2 ** 2
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = -0.378 * cos_q2
        term2 /= (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_6_2_0():
        term1 = (-0.0198702 * cos_q2 - 0.007182)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (-0.012518226 * cos_q2 - 0.0146832)
        term2 *= (-0.004595580771075 * cos_q2 ** 3 - 0.00414726239025 * cos_q2 ** 2 + 0.00319711518 * cos_q2 + 0.0020698524)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_6_2_1():
        term1 = 427192.021899475 * (0.01230409845 * cos_q2 ** 2 + 0.026950266 * cos_q2 + 0.0146832)
        term1 *= (-0.004595580771075 * cos_q2 ** 3 - 0.00414726239025 * cos_q2 ** 2 + 0.00319711518 * cos_q2 + 0.0020698524)
        term1 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        term2 = (0.03906063 * cos_q2 ** 2 + 0.04983735 * cos_q2 + 0.007182)
        term2 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        return term1 + term2

    def element_6_3_0():
        term1 = 14463.0130934286 * (0.007182 - 0.019530315 * cos_q2 ** 2)
        term1 *= (0.078435 * cos_q2 + 0.0798)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = 0.1245 * cos_q2
        term2 /= (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_6_3_1():
        term1 = 14463.0130934286 * (0.007182 - 0.019530315 * cos_q2 ** 2)
        term1 *= (-0.15687 * cos_q2 - 0.184)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = (-0.249 * cos_q2 - 0.09)
        term2 /= (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_7_2_0():
        term1 = (-0.15687 * cos_q2 - 0.2638)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (-0.012518226 * cos_q2 - 0.0146832)
        term2 *= (-0.006152049225 * cos_q2 ** 2 + 0.016345854 * cos_q2 + 0.02748796)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_7_2_1():
        term1 = (0.235305 * cos_q2 + 0.2638)
        term1 /= (0.00096507196192575 * cos_q2 ** 3 + 0.0011319770574 * cos_q2 ** 2 - 0.0013043991492 * cos_q2 - 0.00152998944)
        term2 = 427192.021899475 * (-0.006152049225 * cos_q2 ** 2 + 0.016345854 * cos_q2 + 0.02748796)
        term2 *= (0.01230409845 * cos_q2 ** 2 + 0.026950266 * cos_q2 + 0.0146832)
        term2 /= (0.630770341738927 * cos_q2 ** 3 + 0.739859392362865 * cos_q2 ** 2 - 0.852554347826087 * cos_q2 - 1) ** 2
        return term1 + term2

    def element_7_3_0():
        term1 = 1507.04596433526 * (0.078435 * cos_q2 + 0.0798)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = 1 / (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    def element_7_3_1():
        term1 = 1507.04596433526 * (-0.15687 * cos_q2 - 0.184)
        term1 /= (0.739859392362865 * cos_q2 ** 2 - 1) ** 2
        term2 = -1 / (0.006152049225 * cos_q2 ** 2 - 0.00831516)
        return term1 + term2

    dBdp_x[0, 2, 0, :] = element_0_2_0().view(-1)
    dBdp_x[0, 2, 1, :] = element_0_2_1().view(-1)
    dBdp_x[0, 3, 0, :] = element_0_3_0().view(-1)
    dBdp_x[0, 3, 1, :] = element_0_3_1().view(-1)
    dBdp_x[2, 2, 0, :] = element_2_2_0().view(-1)
    dBdp_x[2, 2, 1, :] = element_2_2_1().view(-1)
    dBdp_x[2, 3, 0, :] = element_2_3_0().view(-1)
    dBdp_x[2, 3, 1, :] = element_2_3_1().view(-1)
    dBdp_x[5, 2, 0, :] = element_5_2_0().view(-1)
    dBdp_x[5, 2, 1, :] = element_5_2_1().view(-1)
    dBdp_x[5, 3, 0, :] = element_5_3_0().view(-1)
    dBdp_x[5, 3, 1, :] = element_5_3_1().view(-1)
    dBdp_x[6, 2, 0, :] = element_6_2_0().view(-1)
    dBdp_x[6, 2, 1, :] = element_6_2_1().view(-1)
    dBdp_x[6, 3, 0, :] = element_6_3_0().view(-1)
    dBdp_x[6, 3, 1, :] = element_6_3_1().view(-1)
    dBdp_x[7, 2, 0, :] = element_7_2_0().view(-1)
    dBdp_x[7, 2, 1, :] = element_7_2_1().view(-1)
    dBdp_x[7, 3, 0, :] = element_7_3_0().view(-1)
    dBdp_x[7, 3, 1, :] = element_7_3_1().view(-1)

    return dBdp_x.permute(3, 0, 1, 2)

# 示例用法
x = torch.randn((10, 4, 1), device='cuda') # 示例输入
result = compute_dBdp_x_matrix(x)
print(result)
